#pragma once
#include <Windows.h>
#include <chrono>

enum class Button : int { NEW_GAME = 1000 }; //идентификатор кнопки

/*-------------------------------------------------------------
					  Состояние игры
--------------------------------------------------------------*/
enum class Game_State { PLAY, GAME_OVER, PAUSE };

/*-------------------------------------------------------------
					  Состояние фигуры
--------------------------------------------------------------*/
enum class Figure_State { MOVE, DESTROY };

/*-------------------------------------------------------------
					 Состояние мигания
--------------------------------------------------------------*/
enum class Flash { OFF, ON }; //OFF - ряды показываются, ОN - ряды не показываются


/*-------------------------------------------------------------
				Параметры окна приложения
--------------------------------------------------------------*/
struct Size_Window {
	const int x_n{ 10 }; //количество клеток по горизонтали
	const int y_n{ 20 }; //количество клеток по вертикали
	const int a_ceil{ 25 }; //размер одной клетки поля
	const int a_edging{ 3 }; //размер кантика
	const int a_side{ 151 }; //ширина бокового поля справа
	const int a_10{ 10 }; //боковые отступы демонстрационного квадрата
	const int n_side{ 5 }; //количество клеток демонстрационного квадрата
	const int h_50{ 50 }; //высота прямоугольника - счет

/*	  Названия координатных точек поля
 
	x1	dx						x3			    
	| /							|				
 y1-*********************************************
	*p1						  / *\			  / *
	*						 /  * xb1,yb1	xb2	*
	*						y3	*				*
	*							*				*
	*							*			yb2	*
	*							*			   \*
	*							*****************
	*							*				*
	*							*****************
	*							*\			    *
	*							* yb3			*
	*						   /*				*
	*						  / *				*
	*						 x4	*			yb4	*
	*							*			   \*
	*							*****************
	*							*				*
	*							*****************
	*							*\				*
	*							* yb5		yb6	*
	*							*			   \*
	*		  y5				*****************
	*			\		    y4 -* 			    *
	*********************************************- y2												
												|
												x2
*/
	
	const int a_right{ 3 * a_edging + x_n * a_ceil + x_n - 1 + a_side }; //правый угол окна
	const int a_down{ 2 * a_edging + y_n * a_ceil + y_n - 1 }; //нижний угол окна

	const int dx{ a_edging }; //отступ слева - поле после кантика
	const int dy{ a_edging }; //отступ сверху - поле после кантика

	const int x1{ 1 }; //общая окантовка левый верхний угол
	const int y1{ 1 }; //общая окантовка левый верхний угол
	const int x2{ a_right - 1 }; //общая окантовка правый нижний угол (1 - корректировка на толщину линии)
	const int y2{ a_down - 1};//общая окантовка правый нижний угол (1 - корректировка на толщину линии)
	
	const int x3{ a_ceil * x_n + x_n + a_edging }; //отделяющая линия
	const int y3{ a_edging }; //отделяющая линия
	const int y4{ a_down - a_edging - 1}; //отделяющая линия

	const int y5{ a_down - a_edging }; //сетка - вертикальные линии
	const int x4{ x3 - 1 }; //сетка - горизонтальные линии

	const int xb1{ a_ceil * x_n + x_n - 1 + 2 * a_edging }; //боковая панель - левый верхний угол
	const int yb1{ a_edging }; //боковая панель - левый верхний угол
	const int xb2{ a_right - a_edging }; //боковая панель - правая граница - начало кантика (не включительно)
	const int yb2{ a_edging + a_side }; //нижняя граница верхнего окна (включая рамку)

	const int yb3{ yb2 + h_50 }; //левый верхний угол окна состояния
	const int yb4{ yb3 + a_side }; //правый нижний угол окна состояния

	const int yb5{ yb4 + h_50 }; //левый верхний угол остаточного прямоугольника
	const int yb6{ a_down - h_50 }; //правый нижний угол остаточного прямоугольника

	const int w_bt{ 100 }; //ширина кнопки "новая игра"
	const int h_bt{ 30 }; //высота кнопки "новая игра"
	const int x_bt{ xb1 + (xb2 - xb1 - w_bt) / 2 }; //координата левого верхнего угла кнопки
	const int y_bt{ yb5 + (yb6 - yb5 - h_bt) / 2 }; //координата левого верхнего угла кнопки
};

/*-------------------------------------------------------------
							Таймер
--------------------------------------------------------------*/
using Time_point = std::chrono::time_point<std::chrono::steady_clock>;

class Timer {
public:
	Timer();
	void set_time_point();
	int duration();
private:
	Time_point time_prev;
};