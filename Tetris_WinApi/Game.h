#pragma once
#include <Windows.h>
#include <array>
#include <exception>
#include <stdexcept> //std::runtime_error
#include <string>
#include <algorithm> //std::find
#include <vector>
#include "Parrent.h"

using WSTR = std::wstring;
using std::vector;

using std::array;
using ARRAY_10_20 = array<array<int, 10>, 20>;

const int n_color_brush = 10;
using ARR_COLOR = array<COLORREF, n_color_brush>;
using AR_BRUSH = array<HBRUSH, n_color_brush>;

const int n_font = 3;
using AR_SIZE_FONT = array<int, n_font>;
using AR_FONT = array<HFONT, n_font>;


class Game : public Parrent {
public:
	Game() = delete;
	Game(Parrent* pf, ARRAY_10_20& field, AR_BRUSH& brush, ARR_COLOR& color, AR_FONT& font, Size_Window& sz);
	~Game();

/*-------------------------------------------------------------
		Создание контекста в памяти и загрузка битмапа
--------------------------------------------------------------*/
	void create_bitmap();

/*-------------------------------------------------------------
					Установка/снятие паузы
--------------------------------------------------------------*/
	void pause();

/*-------------------------------------------------------------
						Начать новую игру
--------------------------------------------------------------*/
	void new_game();

/*-------------------------------------------------------------
					Обработка состояния игры
--------------------------------------------------------------*/
	void game_state();

/*-------------------------------------------------------------
					Обработка состояния игры
--------------------------------------------------------------*/
	void create_button();

/*-------------------------------------------------------------
						  Удалить ряды
--------------------------------------------------------------*/
	void destroy_row(set<int>) override;

/*-------------------------------------------------------------
	  Установка флага мигания и получение мигающих рядов
---------------------------------------------------------------
				  Включения звука анимации
--------------------------------------------------------------*/
	void set_flash(set<int>) override;

/*-------------------------------------------------------------
					  Выключение мигания
--------------------------------------------------------------*/
	void flash_off();

/*-------------------------------------------------------------
					  Генерация мигания
--------------------------------------------------------------*/
	void flash_generation();

/*-------------------------------------------------------------
				Передача периода ON-OFF (мигание)
--------------------------------------------------------------*/
	Flash get_flash() override { return flash; }
	//передаю мерцание в функцию отрисовки клеток поля

/*-------------------------------------------------------------
		 Передаю номера рядов которые должны мигать
--------------------------------------------------------------*/
	set<int> get_row() override { return y_row_flash; }

/*-------------------------------------------------------------
	  Включаю режим вывода сообщения о начисляемых очках
--------------------------------------------------------------*/
	void score_animation_on();

/*-------------------------------------------------------------
	Отключаю режим вывода сообщения о начисляемых очках
--------------------------------------------------------------*/
	void score_animation_off();

/*-------------------------------------------------------------
		 Анимация - вывод сообщения о начисленных очках
--------------------------------------------------------------*/
	void score_animation(HDC);

/*-------------------------------------------------------------
					Начисление очков игры
--------------------------------------------------------------*/
	void set_score();

/*-------------------------------------------------------------
					Вычисление уровня игры
--------------------------------------------------------------*/
	void set_level();

/*-------------------------------------------------------------
					Отрисовка текущего счета
--------------------------------------------------------------*/
	void paint_score(HDC);

/*-------------------------------------------------------------
				   Отрисовка уровня сложности
--------------------------------------------------------------*/
	void paint_level(HDC);

/*-------------------------------------------------------------
					 Отрисовка состояния
--------------------------------------------------------------*/
	void paint(HDC);

/*-------------------------------------------------------------
						PAUSE (Отрисовка)
--------------------------------------------------------------*/
	void paint_pause(HDC);

/*-------------------------------------------------------------
						PLAY (Отрисовка)
--------------------------------------------------------------*/
	void paint_play(HDC);

/*-------------------------------------------------------------
					  GAME_OVER (Отрисовка)
--------------------------------------------------------------*/
	void paint_game_over(HDC);

/*-------------------------------------------------------------
						Обновить окно
--------------------------------------------------------------*/
	void update_window();

/*-------------------------------------------------------------
							Музыка
--------------------------------------------------------------*/
	void play_sound();

/*-------------------------------------------------------------
							Данные
--------------------------------------------------------------*/
private:
	Parrent* p_fig; //указатель на фигуру
	ARRAY_10_20& field; //поле
	AR_BRUSH& brush; //кисти
	ARR_COLOR& color; //цвета
	AR_FONT& font; //шрифты
	Size_Window& sz; //размеры

	//котик
	HDC memBit; //совместимый контекст в памяти
	HANDLE hBitmap; //загруженный bitmap
	HANDLE hOldBitmap; //стоковый bitmap
	BITMAP Bitmap; //размеры битмапа

	//череп
	HDC memBit2; //совместимый контекст в памяти
	HANDLE hBitmap2; //загруженный bitmap
	HANDLE hOldBitmap2; //стоковый bitmap
	BITMAP Bitmap2; //размеры битмапа

	//кнопка
	HWND hwnd_btn{}; //дескриптор кнопки

	//мигание - анимация пропадания рядов
	set<int> y_row_flash{}; //номера рядов которые должны исчезнуть, но перед этим они должны поморгать
	bool flag_flash{ false }; //флаг анимации
	Timer tm; //таймер мигания
	const int n_t{150}; //период мигания - 150 мс
	Flash flash{ Flash::OFF }; //состояние моргания - периоды
	
	//анимация - вывод сообщения о получении количества очков - боковая панель
	bool flag_score_animation{ false }; //флаг - показ: количество начисляемых очков 
	Timer t_score; //таймер мигания
	const int n_t_score{ 1500 }; //время показа сообщения о начисляемых очках

	//текущий счет
	int score{ 0 }; //текущий счет
	int count_row{ 0 }; //количество сгоревших рядов
	
	//уровень
	int level{ 0 }; 
};