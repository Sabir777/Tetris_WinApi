#pragma once
#include <array>
#include <Windows.h>
#include "Options.h"
#include "Parrent.h"




using std::array;
using AR_5 = array<int, 5>;
using ARRAY_10_20 = array<array<int, 10>, 20>;
using AR_5_5 = array<AR_5, 5>;
using AR_5_5_7 = array<AR_5_5, 7>;
using AR_BRUSH = array<HBRUSH, 10>;


const AR_5_5_7 figure_set = {

     AR_5_5{AR_5{0, 0, 0, 0, 0}, //S
                {0, 0, 1, 0, 0},
                {0, 0, 1, 1, 0},
                {0, 0, 0, 1, 0},
                {0, 0, 0, 0, 0}
            },

           {AR_5{0, 0, 0, 0, 0}, //Z
                {0, 0, 1, 0, 0},
                {0, 1, 1, 0, 0},
                {0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0}
           },

           {AR_5{0, 0, 0, 0, 0}, //T
                {0, 0, 1, 0, 0},
                {0, 1, 1, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 0, 0, 0}
           },

           {AR_5{0, 0, 1, 0, 0}, //I
                {0, 0, 1, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 0, 0, 0}
           },

           {AR_5{0, 0, 0, 0, 0}, //L
                {0, 0, 1, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 1, 1, 0},
                {0, 0, 0, 0, 0}
           },

           {AR_5{0, 0, 0, 0, 0}, //J
                {0, 0, 1, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 1, 1, 0, 0},
                {0, 0, 0, 0, 0}
            },

           {AR_5{0, 0, 0, 0, 0}, //O
                {0, 0, 1, 1, 0},
                {0, 0, 1, 1, 0},
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0}
            }
};



class Figure : public Parrent {
public:
/*-------------------------------------------------------------
                           онструкторы
--------------------------------------------------------------*/
    Figure() = delete; //мне не нужен конструктор без аргументов!
    Figure(ARRAY_10_20&, AR_BRUSH&, Size_Window&, Parrent*); //конструктор с параметрами
    Figure(const Figure&) = default; //конструктор копировани€ по умолчанию
    Figure& operator=(Figure&&); //перемещающий оператор присваивани€
    Figure(Figure&&) = default; //перемещающий конструктор копировани€
    Figure& operator=(const Figure&); //оператор копировани€
    ~Figure() = default; //деструктор
    void copy(const Figure& fig); //копирование полей класса



/*-------------------------------------------------------------
                  —оздание следующей фигуры
--------------------------------------------------------------*/
    Figure next();

/*-------------------------------------------------------------
              ”становить начальную позицию фигуры
--------------------------------------------------------------*/

    POINT starting_position(int);
/*-------------------------------------------------------------
               Ќова€ игра - создать новую фигуру
--------------------------------------------------------------*/
    void init_new_figure() override;


/*-------------------------------------------------------------
                   ќбновление текущей фигуры
--------------------------------------------------------------*/
    void update_figure();

/*-------------------------------------------------------------
                        ƒвижение фигуры
--------------------------------------------------------------*/
    void left(); //влево
    void right(); //вправо
    void down(); //вниз
    void fast_down(); //уронить фигуру
    void rotation(); //крутить фигуру
    AR_5_5 transpose(const AR_5_5& arr); //крутить матрицу


/*-------------------------------------------------------------
            ѕроверка на возможность установить фигуру
--------------------------------------------------------------*/
    bool check_move();

/*-------------------------------------------------------------
                    ѕроверка окончани€ игры
 --------------------------------------------------------------*/
    bool check_game_over();

/*-------------------------------------------------------------
                  ѕолучаю Y-координаты фигуры
--------------------------------------------------------------*/
    set<int> get_Y();

/*-------------------------------------------------------------
                      ¬ычислить полные р€ды
 --------------------------------------------------------------*/
   set<int> full_row(set<int>, const ARRAY_10_20&);

/*-------------------------------------------------------------
            ќбновить окно - так как фигура сдвинулась
--------------------------------------------------------------*/
    void update_window();

/*-------------------------------------------------------------
            «апись фигуры в поле - если фигура упала
--------------------------------------------------------------*/
    void write_figure(ARRAY_10_20&);

/*-------------------------------------------------------------
                   ѕрорисовка фигуры на поле
--------------------------------------------------------------*/ 
    void paint(HDC);

/*-------------------------------------------------------------
           ѕрорисовка следующей фигуры на боковой панели
--------------------------------------------------------------*/
    void paint_next(HDC);

/*-------------------------------------------------------------
         ѕроверка наличи€ фигуры по данным координатам
--------------------------------------------------------------*/
    bool check_figure_xy(int x, int y);

/*-------------------------------------------------------------
                    ѕередача состо€ни€ игры 
--------------------------------------------------------------*/
    Game_State get_game_state() override { return state_game; }

/*-------------------------------------------------------------
                   ѕередача состо€ни€ фигуры
--------------------------------------------------------------*/
    Figure_State get_figure_state() override { return state; }

/*-------------------------------------------------------------
          ѕередача информации о начале мигани€ в game
 --------------------------------------------------------------*/
    void set_flash();

/*-------------------------------------------------------------
             ѕередача информации о начале мигани€ в game
--------------------------------------------------------------*/
    void set_time_down(int time) override { nt = time; }
    

/*-------------------------------------------------------------
                            ѕауза
--------------------------------------------------------------*/
    void pause_figure() override;

/*-------------------------------------------------------------
                            ƒанные
--------------------------------------------------------------*/
private:
    int n_type_figure; //запомнить тип фигуры
    int next_n_type_figure; //тип следующей фигуры
    AR_5_5 this_figure; //текуща€ фигура
    POINT coord; //координаты центральной клетки
    int color; //цвет фигуры: от 3 до 9
    int next_figure_color; //цвет следующей фигуры
    Figure_State state; //состо€ние фигуры
    Game_State state_game; //состо€ние игры
    Timer t_move; //таймер
    int nt; //период падени€
    ARRAY_10_20& field; //ссылка на поле
    AR_BRUSH& brush; //ссылка на палитру кистей
    Size_Window& sz; //ссылка на пол€ с размерами
    Parrent* p_game; //указатель на game
};